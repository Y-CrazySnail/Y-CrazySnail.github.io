<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一个程序员的练功房</title>
  
  <subtitle>做难事，必有所得！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-25T16:48:00.853Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>杨海松</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ElasticSearch入门</title>
    <link href="http://yoursite.com/2019/05/22/Java/ElasicSearch/"/>
    <id>http://yoursite.com/2019/05/22/Java/ElasicSearch/</id>
    <published>2019-05-21T20:01:21.000Z</published>
    <updated>2019-05-25T16:48:00.853Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ElasticSearch入门"><a href="#ElasticSearch入门" class="headerlink" title="ElasticSearch入门"></a>ElasticSearch入门</h2><p>Elasticsearch是一个实时分布式搜索和分析引擎。它让你以前所未有的速度处理大数据成为可能。可用于全文搜索、结构化搜索、分析以及将这三者混合使用。</p><a id="more"></a><h3 id="ElasticSearch安装与配置"><a href="#ElasticSearch安装与配置" class="headerlink" title="ElasticSearch安装与配置"></a>ElasticSearch安装与配置</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>下载地址：<a href="https://www.elastic.co/cn/downloads/elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/elasticsearch</a></p><p>Linux下载：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.1.0-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure></p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><h5 id="解压："><a href="#解压：" class="headerlink" title="解压："></a>解压：</h5><p>linux解压命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf elasticsearch-7.1.0</span><br></pre></td></tr></table></figure></p><h5 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h5><p><strong>elasticsearch.yml：</strong></p><ul><li><p>cluster.name: &lt;集群名称&gt;</p></li><li><p>node.name: &lt;节点名&gt;</p></li><li><p>path.data: &lt;存储数据路径1&gt;,&lt;存储数据路径2&gt;…&lt;存储数据路径n&gt;</p></li><li><p>path.logs: &lt;日志存储路径&gt;</p></li><li><p>path.plugins: &lt;插件存储路径&gt;</p></li><li><p>discovery.zen.minimum_master_nodes:  &lt;( master 候选节点个数 / 2) + 1&gt; </p><ul><li><p>为防止发生脑裂，没有足够 master 候选节点的时候，就不要进行 master 节点选举</p></li><li><p>集群最小节点数为</p></li><li><p>API设置minimum_master_nodes</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT /_cluster/settings</span><br><span class="line">&#123;</span><br><span class="line">    "persistent" : &#123;</span><br><span class="line">        "discovery.zen.minimum_master_nodes" : 2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>discovery.seed_hosts: [“host-1”, “host-2”,…,”host-n”]</p><ul><li>在节点开始时传递初始化主机列表使其被发现</li></ul></li><li><p>cluster.initial_master_nodes: [“nodeName-1”,”nodeName-2”,…,”nodeName-n”]</p><ul><li>设置一系列符合主节点条件的节点的主机名或 IP 地址来引导启动集群</li></ul></li></ul><p><strong>jvm.options：</strong></p><ul><li>-Xmx1g <ul><li>最大值（ <code>Xmx</code> ）</li></ul></li><li>-Xms1g <ul><li>最小值（ <code>Xms</code> ）</li></ul></li><li>确保堆内存最小值（ <code>Xms</code> ）与最大值（ <code>Xmx</code> ）的大小是相同的，防止程序在运行时改变堆内存大小， 这是一个很耗系统资源的过程。</li></ul><h5 id="运行："><a href="#运行：" class="headerlink" title="运行："></a>运行：</h5><ul><li>Windows：在bin目录中，运行elasticsearch-7.1.0批处理文件</li><li>Mac、Linux：<code>./bin/elasticsearch</code></li></ul><h4 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h4><hr><p>Q1：Centos启动ElasticSearch报错：<br><code>max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535]</code></p><p>A1：在bash中，有个ulimit命令，提供了对shell及该shell启动的进程的可用资源控制。主要包括打开文件描述符数量、用户的最大进程数量、coredump文件的大小等。Centos 7系统原始的打开文件最大数量为4096。，需要在<code>/etc/security/limits.conf</code>文件中添加:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;Username&gt; soft nofile 65535</span><br><span class="line">&lt;Username&gt; hard nofile 65535</span><br></pre></td></tr></table></figure></p><p>两行配置，将打开文件最大数量设置为65535。退出用户，重新登录后生效。</p><hr><p>Q2：Centos启动ElasticSearch报错<code>max virtue memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</code></p><p>A2：</p><p>官方文档解释：</p><blockquote><p>Elasticsearch uses a mmapfs directory by default to store its indices. The default operating system limits on mmap counts is likely to be too low, which may result in out of memory exceptions.</p><p>On Linux, you can increase the limits by running the following command as <code>root</code>:</p><p><code>sysctl -w vm.max_map_count=262144</code></p><p>To set this value permanently, update the <code>vm.max_map_count</code> setting in <code>/etc/sysctl.conf</code>. To verify after rebooting, run <code>sysctl vm.max_map_count</code>.</p><p>The RPM and Debian packages will configure this setting automatically. No further configuration is required.</p></blockquote><p>翻译：</p><blockquote><p>在默认情况下，ElasticSearch使用MMapFs（内存映射文件系统）目录存储索引。操作系统默认的mmap数限制可能太低，以至于可能陷入内存不足的异常。</p><p>在Linux系统中，你可以使用超级管理员权限执行<code>sysctl -w vm.max_map_count=262144</code>命令来提高下限。</p><p>想永久地设置这个值，需要在<code>/etc/sysctl.conf</code>文件中设置<code>vm.max_map_count</code>值。在完成重新引导后执行<code>sysctl vm.max_map_count</code>命令。</p><p>RPM和Debian系统软件包会自动设置此值，无需再进行配置。</p></blockquote><hr><p>Q3：Linux如何后台启动运行ElasticSearch和Kibana</p><p>A3：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./elasticsearch -d</span><br><span class="line">nohup ./kibana &amp;</span><br></pre></td></tr></table></figure><hr><h3 id="IK-Analyzer-分词器"><a href="#IK-Analyzer-分词器" class="headerlink" title="IK-Analyzer 分词器"></a>IK-Analyzer 分词器</h3><h4 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h4><p>Github地址：<a href="https://github.com/medcl/elasticsearch-analysis-ik" target="_blank" rel="noopener">https://github.com/medcl/elasticsearch-analysis-ik</a></p><ul><li>命令安装：在ElasticSearch目录下执行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v&lt;版本&gt;/elasticsearch-analysis-ik-&lt;版本&gt;.zip</span><br></pre></td></tr></table></figure><blockquote><p>Tip1：IK版本号要与ElasticSearch版本号一致。</p><p>Tip2：集群环境需要在所有节点上安装IK-Analyzer插件</p></blockquote><ul><li>下载文件后解压安装</li></ul><p>在ElasticSearch/plugins目录下新建ik目录，下载IK-Analyzer的Zip压缩文件，解压至ik目录下，删除压缩文件即可。</p><p>安装后重新运行ElasticSearch。</p><h4 id="字典配置"><a href="#字典配置" class="headerlink" title="字典配置"></a>字典配置</h4><p><strong>IKAnalyzer.cfg.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"ext_dict"</span>&gt;</span>custom/mydict.dic;custom/single_word_low_freq.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"ext_stopwords"</span>&gt;</span>custom/ext_stopword.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--用户可以在这里配置远程扩展字典 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"remote_ext_dict"</span>&gt;</span>location<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--用户可以在这里配置远程扩展停止词字典--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"remote_ext_stopwords"</span>&gt;</span>http://xxx.com/xxx.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ElasticSearch入门&quot;&gt;&lt;a href=&quot;#ElasticSearch入门&quot; class=&quot;headerlink&quot; title=&quot;ElasticSearch入门&quot;&gt;&lt;/a&gt;ElasticSearch入门&lt;/h2&gt;&lt;p&gt;Elasticsearch是一个实时分布式搜索和分析引擎。它让你以前所未有的速度处理大数据成为可能。可用于全文搜索、结构化搜索、分析以及将这三者混合使用。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="ElasticSearch" scheme="http://yoursite.com/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>Clumb stair</title>
    <link href="http://yoursite.com/2019/03/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ClimbingStairs/"/>
    <id>http://yoursite.com/2019/03/20/数据结构与算法/ClimbingStairs/</id>
    <published>2019-03-20T03:45:44.000Z</published>
    <updated>2019-05-25T13:04:31.887Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>You are climbing a stair case. It takes <strong><em>n</em></strong> steps to reach to the top.</p><p>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</p><a id="more"></a><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input:  n = 3</span><br><span class="line">Output: 3</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">1) 1, 1, 1</span><br><span class="line">2) 1, 2</span><br><span class="line">3) 2, 1</span><br><span class="line">total 3.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line">Input:  n = 1</span><br><span class="line">Output: 1</span><br><span class="line"></span><br><span class="line">Explanation:  </span><br><span class="line">only 1 way.</span><br></pre></td></tr></table></figure><h3 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a><strong>Idea</strong></h3><p>逆向思维：当最后一步爬1个台阶，有f(n-1)种，当最后一步爬2个台阶，有f(n-2)种，推理得这是一道Fibonacci问题，f(0)=1,f(1)=1,f(n)=f(n-1)+f(n-2)。</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a><strong>Solution</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n: An integer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: An integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write your code here</span></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">int</span>[] f = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10000</span>];</span><br><span class="line">        f[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        f[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            f[i] = f[i-<span class="number">1</span>] + f[i-<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h3&gt;&lt;p&gt;You are climbing a stair case. It takes &lt;strong&gt;&lt;em&gt;n&lt;/em&gt;&lt;/strong&gt; steps to reach to the top.&lt;/p&gt;
&lt;p&gt;Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Java Virtual Machine内存划分</title>
    <link href="http://yoursite.com/2018/11/02/Java/JVM%E5%86%85%E5%AD%98%E5%88%92%E5%88%86/"/>
    <id>http://yoursite.com/2018/11/02/Java/JVM内存划分/</id>
    <published>2018-11-01T20:01:21.000Z</published>
    <updated>2019-05-25T12:21:11.813Z</updated>
    
    <content type="html"><![CDATA[<p>根据《Java虚拟机规范》的规定，内存划分为以下几个部分：程序计数器(Program Counter Register)、Java栈(VM Stack)、本地方法栈(Native Method Stack)、方法区(Method Area)、堆(Heap)。</p><a id="more"></a><p>如下图，<strong>Java编译器</strong>将<strong>源代码文件</strong>(.java)编译为<strong>字节码文件</strong>(.class后缀)，然后由JVM中的<strong>类加载器</strong>加载各个类的字节码文件，加载完毕之后，交由<strong>JVM执行引擎</strong>执行。在整个程序执行过程中，JVM会用一段空间来存储程序执行期间需要用到的数据和相关信息，这段空间一般被称作为Runtime Data Area（运行时数据区），也就是我们常说的JVM内存。因此，在Java中我们常常说到的内存管理就是分配和回收这段内存空间的操作。</p><p><img src="https://github.com/Y-CrazySnail/MyGithubPhoto/blob/master/java/001.png?raw=true" alt></p><h3 id="运行数据区内的内存划分"><a href="#运行数据区内的内存划分" class="headerlink" title="运行数据区内的内存划分"></a>运行数据区内的内存划分</h3><p><strong>方法区</strong>和<strong>堆</strong>是线程共享的</p><p><strong>Java栈</strong>、<strong>本地方法栈</strong>和<strong>程序计数器</strong>是线程私有的</p><p><strong>方法区</strong>、<strong>堆</strong>、<strong>Java虚拟机栈</strong>和<strong>本地方法栈</strong>会抛出<strong>OutOfMemoryError</strong>错误，<strong>本地方法栈</strong>和<strong>Java虚拟机栈</strong>会抛出<strong>StackOutflowError</strong>错误，唯有<strong>程序计数器</strong>无内存溢出异常。</p><p><img src="https://github.com/Y-CrazySnail/MyGithubPhoto/blob/master/java/002.png?raw=true" alt></p><h3 id="各个内存区域存储的数据"><a href="#各个内存区域存储的数据" class="headerlink" title="各个内存区域存储的数据"></a>各个内存区域存储的数据</h3><ul><li><strong>程序计数器</strong></li></ul><p>一块较小的内存空间，它是当前线程所执行的字节码的行号指示器，字节码解释器工作时通过改变该计数器的值来选择下一条需要执行的字节码指令，分支、跳转、循环等基础功能都要依赖它来实现。每条线程都有一个独立的的程序计数器，各线程间的计数器互不影响，因此该区域是线程私有的。</p><p>当线程在执行一个 Java 方法时，该计数器记录的是正在执行的虚拟机字节码指令的地址，当线程在执行的是 Native 方法（调用本地操作系统方法）时，该计数器的值为空。另外，该内存区域是唯一一个在 Java 虚拟机规范中没有规定任何 OOM（内存溢出：OutOfMemoryError）情况的区域。</p><ul><li><strong>本地方法栈</strong></li></ul><p>该区域与虚拟机栈所发挥的作用非常相似，只是虚拟机栈为虚拟机执行 Java 方法服务，而本地方法栈则为使用到的本地操作系统（Native）方法服务。</p><ul><li><strong>方法区</strong></li></ul><p>方法区属于线程共享的内存区域，又称Non-Heap（非堆），主要用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据，根据Java 虚拟机规范的规定，当方法区无法满足内存分配需求时，将抛出OutOfMemoryError 异常。值得注意的是在方法区中存在一个叫运行时常量池(Runtime Constant Pool）的区域，它主要用于存放编译器生成的各种字面量和符号引用，这些内容将在类加载后存放到运行时常量池中，以便后续使用。</p><ul><li><strong>Java虚拟机栈</strong></li></ul><p>属于线程私有的数据区域，与线程同时创建，总数与线程关联，代表Java方法执行的内存模型。每个方法执行时都会创建一个栈桢来存储方法的的变量表、操作数栈、动态链接方法、返回值、返回地址等信息。</p><ul><li><strong>堆</strong></li></ul><p>Java 堆也是属于线程共享的内存区域，它在虚拟机启动时创建，是Java 虚拟机所管理的内存中最大的一块，主要用于存放对象实例，几乎所有的对象实例都在这里分配内存，注意Java 堆是垃圾收集器管理的主要区域，因此很多时候也被称做GC 堆，如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出OutOfMemoryError 异常。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;根据《Java虚拟机规范》的规定，内存划分为以下几个部分：程序计数器(Program Counter Register)、Java栈(VM Stack)、本地方法栈(Native Method Stack)、方法区(Method Area)、堆(Heap)。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>二叉树打印</title>
    <link href="http://yoursite.com/2017/04/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%89%93%E5%8D%B0/"/>
    <id>http://yoursite.com/2017/04/25/数据结构与算法/二叉树打印/</id>
    <published>2017-04-25T03:45:44.000Z</published>
    <updated>2019-05-25T13:02:35.947Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二叉树打印"><a href="#二叉树打印" class="headerlink" title="二叉树打印"></a>二叉树打印</h2><p>数据结构指的是存储数据的方式。用不同的方式储存数据，可以对数据做不同的高效操作。因为二叉树就是一种用递归方式定义的数据结构，所以用递归方式遍历二叉树非常方便，下面也会写出非递归方式遍历二叉树的方法。</p><a id="more"></a><p><strong>二叉树：</strong>树中所有节点的子节点数不超过2</p><p><strong>先序遍历：</strong>根结点、左子节点、右子节点</p><p><strong>中序遍历：</strong>左子节点、根结点、右子节点</p><p><strong>后序遍历：</strong>左子节点、右子节点、根结点</p><p><strong>广度优先遍历：</strong>按从上到下从左到右打印所有节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tree</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line">    <span class="keyword">private</span> Tree leftNode;</span><br><span class="line">    <span class="keyword">private</span> Tree rightNode;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Tree</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Tree</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Tree <span class="title">getLeftNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> leftNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeftNode</span><span class="params">(Tree leftNode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.leftNode = leftNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Tree <span class="title">getRightNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rightNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRightNode</span><span class="params">(Tree rightNode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rightNode = rightNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasLeftNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.leftNode == <span class="keyword">null</span> || <span class="keyword">this</span>.leftNode.getValue() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasRightNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.rightNode == <span class="keyword">null</span> || <span class="keyword">this</span>.rightNode.getValue() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h3><p>分别用递归和非递归方法实现。</p><h4 id="递归实现先序遍历"><a href="#递归实现先序遍历" class="headerlink" title="递归实现先序遍历"></a>递归实现先序遍历</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prePrint</span><span class="params">(Tree root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        System.out.print(root.getValue());</span><br><span class="line">        prePrint(root.getLeftNode());</span><br><span class="line">        prePrint(root.getRightNode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="非递归实现先序遍历"><a href="#非递归实现先序遍历" class="headerlink" title="非递归实现先序遍历"></a>非递归实现先序遍历</h4><p>非递归先序遍历需要借助栈去存储未遍历的节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prePrint</span><span class="params">(Tree root)</span> </span>&#123;</span><br><span class="line">    Stack&lt;Tree&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    Tree node = root;</span><br><span class="line">    stack.push(root);</span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">        node = stack.pop();</span><br><span class="line">        System.out.println(node.getValue());</span><br><span class="line">        <span class="keyword">if</span> (node.hasRightNode()) &#123;</span><br><span class="line">            stack.push(node.getRightNode());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.hasLeftNode()) &#123;</span><br><span class="line">            stack.push(node.getLeftNode());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###中序遍历</p><h4 id="递归实现先序遍历-1"><a href="#递归实现先序遍历-1" class="headerlink" title="递归实现先序遍历"></a>递归实现先序遍历</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inorderPrint</span><span class="params">(Tree root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        prePrint(root.getLeftNode());</span><br><span class="line">        System.out.print(root.getValue());</span><br><span class="line">        prePrint(root.getRightNode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><h4 id="递归实现后序遍历"><a href="#递归实现后序遍历" class="headerlink" title="递归实现后序遍历"></a>递归实现后序遍历</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inorderPrint</span><span class="params">(Tree root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        prePrint(root.getLeftNode());</span><br><span class="line">        prePrint(root.getRightNode());</span><br><span class="line">        System.out.print(root.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;二叉树打印&quot;&gt;&lt;a href=&quot;#二叉树打印&quot; class=&quot;headerlink&quot; title=&quot;二叉树打印&quot;&gt;&lt;/a&gt;二叉树打印&lt;/h2&gt;&lt;p&gt;数据结构指的是存储数据的方式。用不同的方式储存数据，可以对数据做不同的高效操作。因为二叉树就是一种用递归方式定义的数据结构，所以用递归方式遍历二叉树非常方便，下面也会写出非递归方式遍历二叉树的方法。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="二叉树" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
</feed>
